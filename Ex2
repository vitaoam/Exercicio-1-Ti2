import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Principal {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ProdutoDAO produtoDAO = new ProdutoDAO();
        int opcao;
        do {
            System.out.println("Menu:");
            System.out.println("1. Listar Produtos");
            System.out.println("2. Inserir Produto");
            System.out.println("3. Excluir Produto");
            System.out.println("4. Atualizar Produto");
            System.out.println("5. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    listarProdutos(produtoDAO);
                    break;
                case 2:
                    inserirProduto(scanner, produtoDAO);
                    break;
                case 3:
                    excluirProduto(scanner, produtoDAO);
                    break;
                case 4:
                    atualizarProduto(scanner, produtoDAO);
                    break;
                case 5:
                    System.out.println("Saindo do programa.");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 5);
        scanner.close();
    }
    private static void listarProdutos(ProdutoDAO produtoDAO) {
        List<Produto> produtos = produtoDAO.listarProdutos();
        for (Produto produto : produtos) {
            System.out.println(produto.getId() + " - " + produto.getNome());
        }
    }
    private static void inserirProduto(Scanner scanner, ProdutoDAO produtoDAO) {
        System.out.print("Digite o nome do produto: ");
        String nome = scanner.next();
        Produto novoProduto = new Produto();
        novoProduto.setNome(nome);
        produtoDAO.inserirProduto(novoProduto);
        System.out.println("Produto inserido com sucesso!");
    }
    private static void excluirProduto(Scanner scanner, ProdutoDAO produtoDAO) {
        System.out.print("Digite o ID do produto a ser excluído: ");
        int id = scanner.nextInt();
        produtoDAO.excluirProduto(id);
        System.out.println("Produto excluído com sucesso!");
    }
    private static void atualizarProduto(Scanner scanner, ProdutoDAO produtoDAO) {
        System.out.print("Digite o ID do produto a ser atualizado: ");
        int id = scanner.nextInt();

        System.out.print("Digite o novo nome do produto: ");
        String novoNome = scanner.next();

        Produto produtoAtualizado = new Produto();
        produtoAtualizado.setId(id);
        produtoAtualizado.setNome(novoNome);

        produtoDAO.atualizarProduto(produtoAtualizado);
        System.out.println("Produto atualizado com sucesso!");
    }
}
class Produto {
    private int id;
    private String nome;

    public Produto() {
    }

    public Produto(int id, String nome) {
        this.id = id;
        this.nome = nome;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }
}

class ProdutoDAO {
    private static final String URL = "jdbc:postgresql://localhost:5432/teste";
    private static final String USUARIO = "ti2cc";
    private static final String SENHA = "ti@cc";
    public List<Produto> listarProdutos() {
        List<Produto> produtos = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM produto");
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nome = resultSet.getString("nome");
                produtos.add(new Produto(id, nome));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return produtos;
    }
    public void inserirProduto(Produto produto) {
        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO produto(nome) VALUES (?)")) {
            preparedStatement.setString(1, produto.getNome());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void excluirProduto(int id) {
        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM produto WHERE id = ?")) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void atualizarProduto(Produto produto) {
        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement preparedStatement = connection.prepareStatement("UPDATE produto SET nome = ? WHERE id = ?")) {
            preparedStatement.setString(1, produto.getNome());
            preparedStatement.setInt(2, produto.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
